From 4bc54170a76470cac550f087ced2629c72ecd27f Mon Sep 17 00:00:00 2001
From: Tomas Popela <tpopela@redhat.com>
Date: Fri, 19 Aug 2016 14:53:18 +0200
Subject: [PATCH 275/595] Redoing the input history item could be wrong

This is due to possible presence of the zero width space character.
---
 .../web-extension/e-editor-dom-functions.c         | 233 +++++++++++----------
 .../web-extension/e-editor-undo-redo-manager.c     |  14 +-
 2 files changed, 134 insertions(+), 113 deletions(-)

diff --git a/modules/webkit-editor/web-extension/e-editor-dom-functions.c b/modules/webkit-editor/web-extension/e-editor-dom-functions.c
index 5e8ef2c8bf..b5474ecb8f 100644
--- a/modules/webkit-editor/web-extension/e-editor-dom-functions.c
+++ b/modules/webkit-editor/web-extension/e-editor-dom-functions.c
@@ -3231,120 +3231,13 @@ body_scroll_event_cb (WebKitDOMElement *element,
 	e_editor_page_set_spell_check_on_scroll_event_source_id (editor_page, id);
 }
 
-void
-e_editor_dom_body_input_event_process (EEditorPage *editor_page,
-				       WebKitDOMEvent *event)
+static void
+remove_zero_width_spaces_on_body_input (EEditorPage *editor_page,
+                                        WebKitDOMNode *node)
 {
-	WebKitDOMDocument *document;
-	WebKitDOMNode *node;
-	WebKitDOMRange *range = NULL;
-	EEditorUndoRedoManager *manager;
-	gboolean do_spell_check = FALSE;
 	gboolean html_mode;
 
-	g_return_if_fail (E_IS_EDITOR_PAGE (editor_page));
-
-	document = e_editor_page_get_document (editor_page);
-	range = e_editor_dom_get_current_range (editor_page);
-
-	manager = e_editor_page_get_undo_redo_manager (editor_page);
-
 	html_mode = e_editor_page_get_html_mode (editor_page);
-	e_editor_page_emit_content_changed (editor_page);
-
-	if (e_editor_undo_redo_manager_is_operation_in_progress (manager)) {
-		e_editor_undo_redo_manager_set_operation_in_progress (manager, FALSE);
-		e_editor_page_set_dont_save_history_in_body_input (editor_page, FALSE);
-		do_spell_check = TRUE;
-		goto out;
-	}
-
-	/* When the Backspace is pressed in a bulleted list item with just one
-	 * character left in it, WebKit will create another BR element in the
-	 * item. */
-	if (!html_mode) {
-		WebKitDOMElement *element;
-
-		element = webkit_dom_document_query_selector (
-			document, "ul > li > br + br", NULL);
-
-		if (element)
-			remove_node (WEBKIT_DOM_NODE (element));
-	}
-
-	if (!save_history_after_event_in_table (editor_page)) {
-		if (!e_editor_page_get_dont_save_history_in_body_input (editor_page))
-			save_history_for_input (editor_page);
-		else
-			do_spell_check = TRUE;
-	}
-
-	/* Don't try to look for smileys if we are deleting text. */
-	if (!e_editor_page_get_dont_save_history_in_body_input (editor_page))
-		e_editor_dom_check_magic_smileys (editor_page);
-
-	e_editor_page_set_dont_save_history_in_body_input (editor_page, FALSE);
-
-	if (e_editor_page_get_return_key_pressed (editor_page) ||
-	    e_editor_page_get_space_key_pressed (editor_page)) {
-		e_editor_dom_check_magic_links (editor_page, FALSE);
-		if (e_editor_page_get_return_key_pressed (editor_page)) {
-			if (fix_paragraph_structure_after_pressing_enter (editor_page) &&
-			    html_mode) {
-				/* When the return is pressed in a H1-6 element, WebKit doesn't
-				 * continue with the same element, but creates normal paragraph,
-				 * so we have to unset the bold font. */
-				e_editor_undo_redo_manager_set_operation_in_progress (manager, TRUE);
-				e_editor_dom_selection_set_bold (editor_page, FALSE);
-				e_editor_undo_redo_manager_set_operation_in_progress (manager, FALSE);
-			}
-
-			fix_paragraph_structure_after_pressing_enter_after_smiley (document);
-
-			do_spell_check = TRUE;
-		}
-	} else {
-		WebKitDOMNode *node;
-
-		node = webkit_dom_range_get_end_container (range, NULL);
-
-		if (surround_text_with_paragraph_if_needed (editor_page, node)) {
-			WebKitDOMElement *element;
-
-			element = webkit_dom_document_get_element_by_id (
-				document, "-x-evo-selection-start-marker");
-			node = webkit_dom_node_get_previous_sibling (WEBKIT_DOM_NODE (element));
-			e_editor_dom_selection_restore (editor_page);
-		}
-
-		if (WEBKIT_DOM_IS_TEXT (node)) {
-			gchar *text;
-
-			text = webkit_dom_node_get_text_content (node);
-
-			if (text && *text && *text != ' ' && !g_str_has_prefix (text, UNICODE_NBSP)) {
-				gboolean valid = FALSE;
-
-				if (*text == '?' && strlen (text) > 1)
-					valid = TRUE;
-				else if (!strchr (URL_INVALID_TRAILING_CHARS, *text))
-					valid = TRUE;
-
-				if (valid) {
-					WebKitDOMNode *prev_sibling;
-
-					prev_sibling = webkit_dom_node_get_previous_sibling (node);
-
-					if (WEBKIT_DOM_IS_HTML_ANCHOR_ELEMENT (prev_sibling))
-						e_editor_dom_check_magic_links (editor_page, FALSE);
-				}
-			}
-			g_free (text);
-		}
-	}
-
-	node = webkit_dom_range_get_end_container (range, NULL);
-
 	/* After toggling monospaced format, we are using UNICODE_ZERO_WIDTH_SPACE
 	 * to move caret into right space. When this callback is called it is not
 	 * necessary anymore so remove it */
@@ -3412,6 +3305,9 @@ e_editor_dom_body_input_event_process (EEditorPage *editor_page,
 			gchar *text;
 			WebKitDOMCharacterData *data;
 			WebKitDOMText *text_node;
+			WebKitDOMDocument *document;
+
+			document = e_editor_page_get_document (editor_page);
 
 			/* Split out the newly written character to its own text node, */
 			data = WEBKIT_DOM_CHARACTER_DATA (node);
@@ -3450,6 +3346,123 @@ e_editor_dom_body_input_event_process (EEditorPage *editor_page,
 			e_editor_dom_selection_restore (editor_page);
 		}
 	}
+}
+
+void
+e_editor_dom_body_input_event_process (EEditorPage *editor_page,
+				       WebKitDOMEvent *event)
+{
+	WebKitDOMDocument *document;
+	WebKitDOMNode *node;
+	WebKitDOMRange *range = NULL;
+	EEditorUndoRedoManager *manager;
+	gboolean do_spell_check = FALSE;
+	gboolean html_mode;
+
+	g_return_if_fail (E_IS_EDITOR_PAGE (editor_page));
+
+	document = e_editor_page_get_document (editor_page);
+	range = e_editor_dom_get_current_range (editor_page);
+	node = webkit_dom_range_get_end_container (range, NULL);
+
+	manager = e_editor_page_get_undo_redo_manager (editor_page);
+
+	html_mode = e_editor_page_get_html_mode (editor_page);
+	e_editor_page_emit_content_changed (editor_page);
+
+	if (e_editor_undo_redo_manager_is_operation_in_progress (manager)) {
+		e_editor_undo_redo_manager_set_operation_in_progress (manager, FALSE);
+		e_editor_page_set_dont_save_history_in_body_input (editor_page, FALSE);
+		remove_zero_width_spaces_on_body_input (editor_page, node);
+		do_spell_check = TRUE;
+		goto out;
+	}
+
+	/* When the Backspace is pressed in a bulleted list item with just one
+	 * character left in it, WebKit will create another BR element in the
+	 * item. */
+	if (!html_mode) {
+		WebKitDOMElement *element;
+
+		element = webkit_dom_document_query_selector (
+			document, "ul > li > br + br", NULL);
+
+		if (element)
+			remove_node (WEBKIT_DOM_NODE (element));
+	}
+
+	if (!save_history_after_event_in_table (editor_page)) {
+		if (!e_editor_page_get_dont_save_history_in_body_input (editor_page))
+			save_history_for_input (editor_page);
+		else
+			do_spell_check = TRUE;
+	}
+
+	/* Don't try to look for smileys if we are deleting text. */
+	if (!e_editor_page_get_dont_save_history_in_body_input (editor_page))
+		e_editor_dom_check_magic_smileys (editor_page);
+
+	e_editor_page_set_dont_save_history_in_body_input (editor_page, FALSE);
+
+	if (e_editor_page_get_return_key_pressed (editor_page) ||
+	    e_editor_page_get_space_key_pressed (editor_page)) {
+		e_editor_dom_check_magic_links (editor_page, FALSE);
+		if (e_editor_page_get_return_key_pressed (editor_page)) {
+			if (fix_paragraph_structure_after_pressing_enter (editor_page) &&
+			    html_mode) {
+				/* When the return is pressed in a H1-6 element, WebKit doesn't
+				 * continue with the same element, but creates normal paragraph,
+				 * so we have to unset the bold font. */
+				e_editor_undo_redo_manager_set_operation_in_progress (manager, TRUE);
+				e_editor_dom_selection_set_bold (editor_page, FALSE);
+				e_editor_undo_redo_manager_set_operation_in_progress (manager, FALSE);
+			}
+
+			fix_paragraph_structure_after_pressing_enter_after_smiley (document);
+
+			do_spell_check = TRUE;
+		}
+	} else {
+		WebKitDOMNode *node;
+
+		node = webkit_dom_range_get_end_container (range, NULL);
+
+		if (surround_text_with_paragraph_if_needed (editor_page, node)) {
+			WebKitDOMElement *element;
+
+			element = webkit_dom_document_get_element_by_id (
+				document, "-x-evo-selection-start-marker");
+			node = webkit_dom_node_get_previous_sibling (WEBKIT_DOM_NODE (element));
+			e_editor_dom_selection_restore (editor_page);
+		}
+
+		if (WEBKIT_DOM_IS_TEXT (node)) {
+			gchar *text;
+
+			text = webkit_dom_node_get_text_content (node);
+
+			if (text && *text && *text != ' ' && !g_str_has_prefix (text, UNICODE_NBSP)) {
+				gboolean valid = FALSE;
+
+				if (*text == '?' && strlen (text) > 1)
+					valid = TRUE;
+				else if (!strchr (URL_INVALID_TRAILING_CHARS, *text))
+					valid = TRUE;
+
+				if (valid) {
+					WebKitDOMNode *prev_sibling;
+
+					prev_sibling = webkit_dom_node_get_previous_sibling (node);
+
+					if (WEBKIT_DOM_IS_HTML_ANCHOR_ELEMENT (prev_sibling))
+						e_editor_dom_check_magic_links (editor_page, FALSE);
+				}
+			}
+			g_free (text);
+		}
+	}
+
+	remove_zero_width_spaces_on_body_input (editor_page, node);
 
 	/* Writing into quoted content */
 	if (html_mode) {
diff --git a/modules/webkit-editor/web-extension/e-editor-undo-redo-manager.c b/modules/webkit-editor/web-extension/e-editor-undo-redo-manager.c
index 50ce7ae610..6ccbe11db4 100644
--- a/modules/webkit-editor/web-extension/e-editor-undo-redo-manager.c
+++ b/modules/webkit-editor/web-extension/e-editor-undo-redo-manager.c
@@ -1888,7 +1888,7 @@ undo_input (EEditorUndoRedoManager *manager,
 	WebKitDOMDocument *document;
 	WebKitDOMDOMWindow *dom_window = NULL;
 	WebKitDOMDOMSelection *dom_selection = NULL;
-	WebKitDOMNode *node, *tmp_node;
+	WebKitDOMNode *node, *anchor_node, *tmp_node;
 	gboolean remove_anchor;
 
 	document = e_editor_page_get_document (editor_page);
@@ -1916,8 +1916,8 @@ undo_input (EEditorUndoRedoManager *manager,
 
 	/* If we are undoing the text that was appended to the link we have to
 	 * remove the link and make just the plain text from it. */
-	node = webkit_dom_dom_selection_get_anchor_node (dom_selection);
-	node = webkit_dom_node_get_parent_node (node);
+	anchor_node = webkit_dom_dom_selection_get_anchor_node (dom_selection);
+	node = webkit_dom_node_get_parent_node (anchor_node);
 	remove_anchor = WEBKIT_DOM_IS_HTML_ANCHOR_ELEMENT (node);
 	if (remove_anchor) {
 		gchar *text_content;
@@ -1929,6 +1929,14 @@ undo_input (EEditorUndoRedoManager *manager,
 			g_utf8_strlen (text_content, -1) ==
 			webkit_dom_dom_selection_get_anchor_offset (dom_selection);
 		g_free (text_content);
+	} else if (WEBKIT_DOM_IS_TEXT (anchor_node)) {
+		gchar *text_content;
+
+		text_content = webkit_dom_node_get_text_content (anchor_node);
+		if (g_strcmp0 (text_content, UNICODE_ZERO_WIDTH_SPACE) == 0)
+			webkit_dom_dom_selection_modify (dom_selection, "extend", "left", "character");
+
+		g_free (text_content);
 	}
 
 	e_editor_dom_exec_command (editor_page, E_CONTENT_EDITOR_COMMAND_DELETE, NULL);
-- 
2.15.0

