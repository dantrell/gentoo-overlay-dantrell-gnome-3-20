diff '--exclude=.git' -urN b/daemon/gdm-local-display-factory.c c/daemon/gdm-local-display-factory.c
--- b/daemon/gdm-local-display-factory.c	2015-11-18 01:52:01.702030890 -0500
+++ c/daemon/gdm-local-display-factory.c	2015-11-18 01:55:52.897960918 -0500
@@ -83,6 +83,8 @@
                                                          GParamSpec                  *arg1,
                                                          GdmLocalDisplayFactory      *factory);
 
+static void gdm_local_display_factory_start_monitor (GdmLocalDisplayFactory *factory);
+static gboolean gdm_local_display_factory_sync_seats    (GdmLocalDisplayFactory *factory);
 static gpointer local_display_factory_object = NULL;
 
 G_DEFINE_TYPE (GdmLocalDisplayFactory, gdm_local_display_factory, GDM_TYPE_DISPLAY_FACTORY)
@@ -185,11 +187,6 @@
 {
         GdmDisplayStore *store;
 
-        g_signal_connect (display, "notify::status",
-                          G_CALLBACK (on_display_status_changed), factory);
-
-        g_object_weak_ref (G_OBJECT (display), (GWeakNotify)on_display_disposed, factory);
-
         store = gdm_display_factory_get_display_store (GDM_DISPLAY_FACTORY (factory));
         gdm_display_store_add (store, display);
 }
@@ -275,6 +272,26 @@
         return ret;
 }
 
+static gboolean
+ensure_initial_display_configuration (GdmLocalDisplayFactory *factory)
+{
+        GdmDisplay *display;
+
+#ifdef WITH_SYSTEMD
+        if (LOGIND_RUNNING()) {
+                if (!factory->priv->seat_new_id) {
+                        gdm_local_display_factory_start_monitor (factory);
+                }
+                return gdm_local_display_factory_sync_seats (factory);
+        }
+#endif
+
+        /* On ConsoleKit just create Seat1, and that's it. */
+        display = create_display (factory, CK_SEAT1_PATH, NULL, TRUE);
+
+        return display != NULL;
+}
+
 static void
 on_display_status_changed (GdmDisplay             *display,
                            GParamSpec             *arg1,
@@ -312,12 +329,16 @@
                 }
                 gdm_display_store_remove (store, display);
 
-                /* Create a new equivalent display if it was static */
+                /* if this is a local display, do a full resync.  Only
+                 * seats without displays will get created anyway.  This
+                 * ensures we get a new login screen when the user logs out,
+                 * if there isn't one.
+                 */
                 if (is_local) {
                         /* reset num failures */
                         factory->priv->num_failures = 0;
 
-                        create_display (factory, seat_id, session_type, is_initial);
+                        ensure_initial_display_configuration (factory);
                 }
                 break;
         case GDM_DISPLAY_FAILED:
@@ -445,7 +466,8 @@
         gdm_display_store_foreach_remove (store, lookup_by_seat_id, (gpointer) seat_id);
 }
 
-static gboolean gdm_local_display_factory_sync_seats (GdmLocalDisplayFactory *factory)
+static gboolean
+gdm_local_display_factory_sync_seats (GdmLocalDisplayFactory *factory)
 {
         GError *error = NULL;
         GVariant *result;
@@ -571,31 +593,70 @@
 
 #endif
 
+static void
+on_display_added (GdmDisplayStore        *display_store,
+                  const char             *id,
+                  GdmLocalDisplayFactory *factory)
+{
+        GdmDisplay *display;
+
+        display = gdm_display_store_lookup (display_store, id);
+
+        if (display != NULL) {
+                g_signal_connect (display, "notify::status",
+                                  G_CALLBACK (on_display_status_changed), factory);
+
+                g_object_weak_ref (G_OBJECT (display), (GWeakNotify)on_display_disposed, factory);
+        }
+}
+
+static void
+on_display_removed (GdmDisplayStore        *display_store,
+                    const char             *id,
+                    GdmLocalDisplayFactory *factory)
+{
+        GdmDisplay *display;
+
+        display = gdm_display_store_lookup (display_store, id);
+
+        if (display != NULL) {
+                g_signal_handlers_disconnect_by_func (display, G_CALLBACK (on_display_status_changed), factory);
+                g_object_weak_unref (G_OBJECT (display), (GWeakNotify)on_display_disposed, factory);
+
+        }
+}
+
 static gboolean
 gdm_local_display_factory_start (GdmDisplayFactory *base_factory)
 {
         GdmLocalDisplayFactory *factory = GDM_LOCAL_DISPLAY_FACTORY (base_factory);
-        GdmDisplay             *display;
+        gboolean                display_started;
+        GdmDisplayStore *store;
 
         g_return_val_if_fail (GDM_IS_LOCAL_DISPLAY_FACTORY (factory), FALSE);
 
-#ifdef WITH_SYSTEMD
-        if (LOGIND_RUNNING()) {
-                gdm_local_display_factory_start_monitor (factory);
-                return gdm_local_display_factory_sync_seats (factory);
-        }
-#endif
+        store = gdm_display_factory_get_display_store (GDM_DISPLAY_FACTORY (factory));
 
-        /* On ConsoleKit just create Seat1, and that's it. */
-        display = create_display (factory, CK_SEAT1_PATH, NULL, TRUE);
+        g_signal_connect (G_OBJECT (store),
+                          "display-added",
+                          G_CALLBACK (on_display_added),
+                          factory);
+
+        g_signal_connect (G_OBJECT (store),
+                          "display-removed",
+                          G_CALLBACK (on_display_removed),
+                          factory);
 
-        return display != NULL;
+        display_started = ensure_initial_display_configuration (factory);
+
+        return display_started;
 }
 
 static gboolean
 gdm_local_display_factory_stop (GdmDisplayFactory *base_factory)
 {
         GdmLocalDisplayFactory *factory = GDM_LOCAL_DISPLAY_FACTORY (base_factory);
+        GdmDisplayStore *store;
 
         g_return_val_if_fail (GDM_IS_LOCAL_DISPLAY_FACTORY (factory), FALSE);
 
@@ -603,6 +664,15 @@
         gdm_local_display_factory_stop_monitor (factory);
 #endif
 
+        store = gdm_display_factory_get_display_store (GDM_DISPLAY_FACTORY (factory));
+
+        g_signal_handlers_disconnect_by_func (G_OBJECT (store),
+                                              G_CALLBACK (on_display_added),
+                                              factory);
+        g_signal_handlers_disconnect_by_func (G_OBJECT (store),
+                                              G_CALLBACK (on_display_removed),
+                                              factory);
+
         return TRUE;
 }
 
